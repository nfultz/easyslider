% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/easyslider.R
\name{easyslider}
\alias{easyslider}
\alias{sliderFilter}
\alias{slider2Filter}
\alias{dropdownFilter}
\title{Easy sliders for shiny.}
\usage{
sliderFilter(df, aes, ...)

slider2Filter(df, aes, ...)

dropdownFilter(df, aes, ...)
}
\arguments{
\item{df}{a data.frame}

\item{aes}{an aesthic to map a column to the filter}
}
\value{
a reactive, filtered data.frame
}
\description{
This package was written because it was frustrating to
add a slider in shiny, which typically required changing
code in three places: the placeholder in \code{ui.R},
a \code{renderUI} in \code{server.R} and also wiring it
up to a plot by using \code{input$thing}.
}
\examples{
\dontrun{

#ui.R

library(shiny)


shinyUI(fluidPage(

  # Application title
  titlePanel("Easy Slider Diamond Demo"),

  # Sidebar with easyslider controls
  sidebarLayout(
    sidebarPanel(
      easySliderUIOutput()
    ),

    # Show a plot of the filtered data
    mainPanel(
      plotOutput("distPlot")
    )
  )

))

#server.R

require(dplyr)
require(ggplot2)

library(shiny)
library(easyslider)


shinyServer(function(input, output) {

  df <- diamonds \%>\%
    slider2Filter(aes(depth)) \%>\%
    dropdownFilter(aes(clarity))

  output$distPlot <- renderPlot({
      df() \%>\% ggplot() + aes(x=carat, y=price, color=cut) + geom_point()
    })

})


}
}
